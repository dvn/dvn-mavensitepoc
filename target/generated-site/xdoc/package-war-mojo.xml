<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
  <properties>
    <title>dvn:package-war</title>
  </properties>
  <body>
    <section name="dvn:package-war">
      <p><strong>Full name</strong>:</p>
      <p>edu.harvard.iq:dvn:3.4:package-war</p>
      <p><strong>Description</strong>:</p>
      <div>Packages the Play application as War.</div>
      <p><strong>Attributes</strong>:</p>
      <ul>
        <li>Requires a Maven project to be executed.</li>
        <li>Requires dependency resolution of artifacts in scope: <code>test</code>.</li>
        <li>Binds by default to the lifecycle phase: <code>package</code>.</li>
      </ul>
      <subsection name="Optional Parameters">
        <table border="0">
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Since</th>
            <th>Description</th>
          </tr>
          <tr>
            <td><strong><a href="#additionalFiles">additionalFiles</a></strong></td>
            <td><code>List</code></td>
            <td><code>-</code></td>
            <td>Allows customization of the play packaging. The files specified in
this attribute will get added to the distribution zip file. This
allows, for example, to write your own start script and have it
packaged in the distribution. This is done post-packaging by the
play framework. This parameter is shared with the package mojo.<br/></td>
          </tr>
          <tr>
            <td><strong><a href="#baseDirectory">baseDirectory</a></strong></td>
            <td><code>File</code></td>
            <td><code>-</code></td>
            <td>Base directory of the project.<br/></td>
          </tr>
          <tr>
            <td><strong><a href="#buildDirectory">buildDirectory</a></strong></td>
            <td><code>File</code></td>
            <td><code>-</code></td>
            <td>Directory containing the build files.<br/></td>
          </tr>
          <tr>
            <td><strong><a href="#buildWar">buildWar</a></strong></td>
            <td><code>boolean</code></td>
            <td><code>-</code></td>
            <td>Enables or disabled the packaging of the application as a War file.<br/><strong>Default value is</strong>: <code>true</code>.</td>
          </tr>
          <tr>
            <td><strong><a href="#play2Home">play2Home</a></strong></td>
            <td><code>String</code></td>
            <td><code>-</code></td>
            <td>The PLAY2_HOME path is taken from this setting, if not found as a
Java system property (-DPLAY2_HOME). Refers to the PLAY2_HOME
environment variable by default. So that means that the PLAY2_HOME
can be given using: 
<ol>
<li>A system variable defined by the system or with
<tt>-DPLAY2_HOME=...</tt></li>
<li>The <tt>play2Home</tt> configuration property</li>
<li>The PLAY2_HOME environment property</li>
</ol><br/></td>
          </tr>
          <tr>
            <td><strong><a href="#play2SystemProperties">play2SystemProperties</a></strong></td>
            <td><code>Properties</code></td>
            <td><code>-</code></td>
            <td>Allows customization of the play execution System properties.<br/></td>
          </tr>
          <tr>
            <td><strong><a href="#pluginArtifacts">pluginArtifacts</a></strong></td>
            <td><code>List</code></td>
            <td><code>-</code></td>
            <td>Dependencies of the current plugin. This list is used to extract
and copy the servlet bridge.<br/></td>
          </tr>
          <tr>
            <td><strong><a href="#timeout">timeout</a></strong></td>
            <td><code>long</code></td>
            <td><code>-</code></td>
            <td>Sets a timeout to the <tt>play</tt> invocation (in milliseconds).
If not set (or set to <tt>-1</tt>, the plugin waits until the
underlying <tt>play</tt> process completes. If set, the plugin
kills the underlying <tt>play</tt> process when the timeout is
reached, and it fails the build.<br/><strong>Default value is</strong>: <code>-1</code>.</td>
          </tr>
          <tr>
            <td><strong><a href="#warClassifier">warClassifier</a></strong></td>
            <td><code>String</code></td>
            <td><code>-</code></td>
            <td>Sets the war classifier.<br/></td>
          </tr>
          <tr>
            <td><strong><a href="#webappDirectory">webappDirectory</a></strong></td>
            <td><code>File</code></td>
            <td><code>-</code></td>
            <td>The directory where the webapp is built.<br/><strong>Default value is</strong>: <code>${project.build.directory}/${project.build.finalName}</code>.</td>
          </tr>
        </table>
      </subsection>
      <subsection name="Parameter Details">
        <p><strong><a name="additionalFiles">additionalFiles</a>:</strong></p>
        <div>Allows customization of the play packaging. The files specified in
this attribute will get added to the distribution zip file. This
allows, for example, to write your own start script and have it
packaged in the distribution. This is done post-packaging by the
play framework. This parameter is shared with the package mojo.</div>
        <ul>
          <li><strong>Type</strong>: <code>java.util.List</code></li>
          <li><strong>Required</strong>: <code>No</code></li>
        </ul><hr/><p><strong><a name="baseDirectory">baseDirectory</a>:</strong></p>
        <div>Base directory of the project.</div>
        <ul>
          <li><strong>Type</strong>: <code>java.io.File</code></li>
          <li><strong>Required</strong>: <code>No</code></li>
          <li><strong>Expression</strong>: <code>${basedir}</code></li>
        </ul><hr/><p><strong><a name="buildDirectory">buildDirectory</a>:</strong></p>
        <div>Directory containing the build files.</div>
        <ul>
          <li><strong>Type</strong>: <code>java.io.File</code></li>
          <li><strong>Required</strong>: <code>No</code></li>
          <li><strong>Expression</strong>: <code>${project.build.directory}</code></li>
        </ul><hr/><p><strong><a name="buildWar">buildWar</a>:</strong></p>
        <div>Enables or disabled the packaging of the application as a War file.</div>
        <ul>
          <li><strong>Type</strong>: <code>boolean</code></li>
          <li><strong>Required</strong>: <code>No</code></li>
          <li><strong>Default</strong>: <code>true</code></li>
        </ul><hr/><p><strong><a name="play2Home">play2Home</a>:</strong></p>
        <div>The PLAY2_HOME path is taken from this setting, if not found as a
Java system property (-DPLAY2_HOME). Refers to the PLAY2_HOME
environment variable by default. So that means that the PLAY2_HOME
can be given using: 
<ol>
<li>A system variable defined by the system or with
<tt>-DPLAY2_HOME=...</tt></li>
<li>The <tt>play2Home</tt> configuration property</li>
<li>The PLAY2_HOME environment property</li>
</ol></div>
        <ul>
          <li><strong>Type</strong>: <code>java.lang.String</code></li>
          <li><strong>Required</strong>: <code>No</code></li>
          <li><strong>Expression</strong>: <code>${env.PLAY2_HOME}</code></li>
        </ul><hr/><p><strong><a name="play2SystemProperties">play2SystemProperties</a>:</strong></p>
        <div>Allows customization of the play execution System properties.</div>
        <ul>
          <li><strong>Type</strong>: <code>java.util.Properties</code></li>
          <li><strong>Required</strong>: <code>No</code></li>
        </ul><hr/><p><strong><a name="pluginArtifacts">pluginArtifacts</a>:</strong></p>
        <div>Dependencies of the current plugin. This list is used to extract
and copy the servlet bridge.</div>
        <ul>
          <li><strong>Type</strong>: <code>java.util.List</code></li>
          <li><strong>Required</strong>: <code>No</code></li>
          <li><strong>Expression</strong>: <code>${plugin.artifacts}</code></li>
        </ul><hr/><p><strong><a name="timeout">timeout</a>:</strong></p>
        <div>Sets a timeout to the <tt>play</tt> invocation (in milliseconds).
If not set (or set to <tt>-1</tt>, the plugin waits until the
underlying <tt>play</tt> process completes. If set, the plugin
kills the underlying <tt>play</tt> process when the timeout is
reached, and it fails the build.</div>
        <ul>
          <li><strong>Type</strong>: <code>long</code></li>
          <li><strong>Required</strong>: <code>No</code></li>
          <li><strong>Expression</strong>: <code>${play2timeout}</code></li>
          <li><strong>Default</strong>: <code>-1</code></li>
        </ul><hr/><p><strong><a name="warClassifier">warClassifier</a>:</strong></p>
        <div>Sets the war classifier.</div>
        <ul>
          <li><strong>Type</strong>: <code>java.lang.String</code></li>
          <li><strong>Required</strong>: <code>No</code></li>
        </ul><hr/><p><strong><a name="webappDirectory">webappDirectory</a>:</strong></p>
        <div>The directory where the webapp is built.</div>
        <ul>
          <li><strong>Type</strong>: <code>java.io.File</code></li>
          <li><strong>Required</strong>: <code>No</code></li>
          <li><strong>Default</strong>: <code>${project.build.directory}/${project.build.finalName}</code></li>
        </ul>
      </subsection>
    </section>
  </body>
</document>